const fs = require("fs");
const fsPromises = require("fs").promises;
const path = require("path");

//If utf8 is omitted output will be in buffer and not in string
//data.toString will also do the job but its tedious to add it everywhere like data.toString()
//Dont use hardcoded path like "./files/starter.txt" instead use common core modules like path becuase
//Slashes in operating system sometimes is in backward or forward slash this could lead to errors.

//Reading File
fs.readFile(
  path.join(__dirname, "files", "starter.txt"),
  "utf8",
  (err, data) => {
    if (err) throw err;

    console.log(
      `READ OPERATION FS - ${data} I am the asynchronous code i will get executed after synchronous execution gets completed`
    );
  }
);

//! while Writing File utf8  is by default present here dont need to add it explictly
//! This code introduces callback hell. Refer promises.txt for clean and consise code
fs.writeFile(
  path.join(__dirname, "files", "callback_hell_file.txt"),
  "This text is generated by the write File method of fs common core modules",

  (err) => {
    if (err) throw err;

    console.log("Write Operation successtion created - callback_hell_file.txt");
    //Append will update the file but never overrides existing line if exist else it will create that file.

    fs.appendFile(
      path.join(__dirname, "files", "callback_hell_file.txt"),
      "\n\n I got added here in this file by append method ",

      (err) => {
        if (err) throw err;

        console.log("Append Operation successtion");

        //renaming file
        fs.rename(
          path.join(__dirname, "files", "callback_hell_file.txt"),
          path.join(__dirname, "files", "generated_by_callback_hell_code.txt"),

          (err) => {
            if (err) throw err;

            console.log("rename Operation successtion");
          }
        );
      }
    );
  }
);

//! exit on uncaught error. Try reading a non exist file to see this in action
process.on("uncaughtException", (err) => {
  console.log(`Uncaught Exception err: ${err}`);
  exit(1);
});

//?-----------------------------------------
//! Using async await to avoid callback hell which uses fspromises.
//! Here uncaught error is caught in the catch block
const fileOps = async () => {
  try {
    const readData = await fsPromises.readFile(
      path.join(__dirname, "files", "starter.txt"),
      "utf8"
    );
    //Deletes the lorem file but we have stored its data before deleting
    //unlink is also supported in fs core module and fspromises core module
    // await fsPromises.unlink(path.join(__dirname, "files", "lorem.txt"));
    await fsPromises.writeFile(
      path.join(__dirname, "files", "promises.txt"),
      readData
    );
    await fsPromises.appendFile(
      path.join(__dirname, "files", "promises.txt"),
      "\nAppend opertion using fsPromises"
    );
    await fsPromises.rename(
      path.join(__dirname, "files", "promises.txt"),
      path.join(__dirname, "files", "generated_by_promises_code.txt")
    );
    console.log("completed fs promises");
    //! This will delete the file
    // await fsPromises.unlink(
    //   path.join(__dirname, "files", "waiting_tobe_deleted.txt")
    // );
  } catch (err) {
    console.error(err);
  }
};
fileOps();
console.log("synchronous code");
